@page "/gameMove"
@using MauiApp3.Data.Controler
@layout MainLayout
@inject NavigationManager NavigationManager


<section class="main-conteneer">
    <p class="top-row-text text">@str</p>
    <div style="display: flex; flex-wrap: wrap;">
        <div>
            <select @bind="index">
                <option value="">Выберете фигуру</option>
                @foreach (var item in chessGame.GetFigure(IsWhile))
                {
                    <option value="@item.Pozition">@item.Name@item.Pozition</option>
                }
            </select>
        </div>
        <div>
            <select @bind="move">
                <option value="">Выберете ход</option>
                @for (int i = 0; i < 8; i++)
                {
                    for (int j = 1; j <= 8; j++)
                    {
                        <option value="@(coloms[i]+j)">@(coloms[i] + j)</option>
                    }
                }
            </select>
        </div>
    </div>
    <div>
        <button @onclick="SetMove" class="text">Сделать ход</button>
        <button @onclick="SwapEnd" class="text">Завершить партию</button>
        <button @onclick="DeleteMove" class="text">Удалить ход</button>
    </div>
    @if (End)
    {
        <select @bind="result">
            <option value="">Выберете результат</option>
            <option value="1">Белые</option>
            <option value="0">Чёрные</option>
            <option value="0.5">Ничья</option>
        </select>
        <button @onclick="EndGame" class="text">Подвердить</button>
    }
    <div>
        @foreach (var item in chessGame.Move)
        {
            @(item + "; ")
        }
    </div>
</section>

@code {

    Data.ChessClasses.ChessGame chessGame = new(ConsignmentControler.nowConsignment);
    string[] coloms = new string[] { "A", "B", "C", "D", "E", "F", "G", "H" };
    bool IsWhile = true, End, del = false;
    string move, index, str = "Белые";
    double? result;

    private void Swap() => str = IsWhile ? "Белые" : "Чёрные";
    private void SwapEnd() => End = !End;

    private void DeleteMove()
    {
        if (!del) return;
        IsWhile = !IsWhile;
        Swap();
        del = false;
        chessGame.DeleteLastMove();
    }

    private void SetMove()
    {
        if (index == null) return;
        if (move == null) return;

        chessGame.SetFigure(chessGame.GetFigure(IsWhile).Where(p => p.Pozition == index).FirstOrDefault(), move);
        index = "";
        IsWhile = !IsWhile;
        del = true;
        Swap();
    }

    private void EndGame()
    {
        if (result == null) return;
        chessGame.EndGame(result);
        Data.DataBaseFullConn.CloseCon();
        NavigationManager.NavigateTo("/game");
    }
}